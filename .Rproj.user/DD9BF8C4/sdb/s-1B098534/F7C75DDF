{
    "collab_server" : "",
    "contents" : "library(tidyverse)\nlibrary(COVID19)\nlibrary(padr)\nlibrary(lubridate)\nlibrary(progress)\nlibrary(RcppRoll)\nlibrary(parallel)\nlibrary(data.table)\nlibrary(ggpubr)\nlibrary(usmap)\nlibrary(tsoutliers)\nlibrary(mgcv)\nlibrary(gganimate)\nsource(\"scripts/utils.R\")\n\n\n# Settings & params -------------------------------------------------------\n\ntheme_set(theme_bw(base_size=12))\nmin_date <- as.Date('2020-10-01')\nfilt=TRUE\nforecast_after <- as.Date('2022-03-31')\n\n\n# Countries ---------------------------------------------------------------\n\nUK <- covid19('United Kingdom') %>% as.data.table\nUK[,country:=administrative_area_level_1]\nUK[,region:=country]\nUK <- UK[country %in% countries & date>=min_date]\nUK[,raw_cases:=dfs(confirmed),by=country]\nUK[,new_confirmed:=outlier_detection(raw_cases)]\nUK[,rm:=round(frollmean(new_confirmed,7,align='right'))]\n\nUK[,new_deaths:=dfs(deaths),by=country]\nUK[,deaths_pc:=deaths/population]\n\nUK <- covid19_nbss(UK,filtering = filt) %>% as.data.table\n\n# US holidays -------------------------------------------------------------\n\nthanksgiving <- c(seq(as.Date('2020-11-26'),as.Date('2020-11-27'),by='day'),\n                  seq(as.Date('2021-11-25'),as.Date('2021-11-29'),by='day'))\nchristmas <- as.Date(c('2020-12-25','2020-12-26'))\nny<- seq(as.Date('2021-01-01'),as.Date('2021-01-02'),by='day')\nlbr <- as.Date(c('2021-09-06','2021-09-07'))\nipd <- as.Date(c('2021-10-11','2021-10-12'))\nhlwn <- as.Date(c('2021-10-30','2021-10-31','2021-11-01'))\nus_holidays <- c(thanksgiving,christmas,ny,lbr,ipd,hlwn)\n\n# NYC ----------------------------------------------------\nUS_counties <- covid19(\"United States\",level=3) %>% as.data.table\nUS_counties[,country:=administrative_area_level_1]\nUS_counties[,state:=administrative_area_level_2]\nUS_counties[,county:=administrative_area_level_3]\nUS_counties <- US_counties[!state %in% c('Guam','Northern Mariana Islands','Virgin Islands','American Samoa')]\nUS_counties[,new_confirmed:=dfs(confirmed),by=c('state','county')]\n\nUS_counties[,new_deaths:=dfs(deaths),by=c('state','county')]\nUS_counties[,lbl:=paste(state,county,sep=',')]\n\nNYC <- US_counties[county=='New York City' & date>=min_date]\n\n### there's an important reporting error in the NYC data.\n### On Sunday, April 3rd, NYC broke from a previous pattern of reporting on Sundays & reported 0 cases\n### The following day, April 4th, NYC had a Sunday-like spike of reporting. \n### This outlier of changing day-of-week reporting comes at a critical point of the NYC outbreak\n### when decelerations were first evident and a peak could occur in the following week or two\n### One approach would be to forecast 7d moving averages...\n### but such moving average forecasts lag behind contemporary incidence, underestimating incidence\n### at the peak and overestimating incidence after the peak.\n### To keep forecasts up-to-date and accurately incorporating new daily information with minimal lag,\n### I will manually split the Monday April 4th cases across Sunday April 3 and Monday April 4,\n### preserving the Sun/Mon case ratio estimated from the preceding 4 weeks.\nNYC[,raw_cases:=new_confirmed] ### raw data - for later use if needed.\n\nSunday_cases <- NYC[date %in% (as.Date('2022-04-03')-7*(1:4)),new_confirmed]\nMonday_cases <- NYC[date %in% (as.Date('2022-04-04')-7*(1:4)),new_confirmed]\nAnomalous_date_cases <- NYC[date==as.Date('2022-04-04'),new_confirmed]\nSun_Mon_ratio <- exp(mean(log(Sunday_cases/Monday_cases)))\n\nNYC[date==as.Date('2022-04-03')]$new_confirmed <- round(Anomalous_date_cases*Sun_Mon_ratio/(Sun_Mon_ratio+1))\nNYC[date==as.Date('2022-04-04')]$new_confirmed <- round(Anomalous_date_cases/(Sun_Mon_ratio+1))\n\nNYC[,new_confirmed:=outlier_detection(new_confirmed)]\n\nNYC[,rm:=round(frollmean(new_confirmed,7,align='right'))]\n\n### Missing data on 4/3 and a next-day data dump on 4/4 are outliers\n# NYC[date %in% as.Date(c('2022-04-03','2022-04-04')),new_confirmed:=NA]\n# NYC[date %in% as.Date('2022-04-03'),rm:=NA]\n\nNYC <- covid19_nbss(NYC,filtering = filt) %>% as.data.table\n\n\n# Combining datasets ----------------------------------------------------------------\n\nuk <- UK[date>as.Date('2022-02-01')]\nuk[,region:='United Kingdom']\nnyc <- NYC[date>as.Date('2022-02-01')]\nnyc[,region:='New York City']\n\nnyc_tot <- nyc\n# nyc <- nyc[date<=forecast_after]\n\nxx <- rbind(uk[,c('date','region','growth_rate','p2.5_growth_rate','p97.5_growth_rate',\n                  'new_confirmed','rm','raw_cases','mean_position','p2.5_position','p97.5_position')],\n            nyc[,c('date','region','growth_rate','p2.5_growth_rate','p97.5_growth_rate',\n                   'new_confirmed','rm','raw_cases','mean_position','p2.5_position','p97.5_position')])\nxx[,region:=factor(region,levels=c('United Kingdom','New York City'))]\n\n\n\n# Outbreak comparison -----------------------------------------------------\n\nxx[,outbreak_start:=date[min(which(growth_rate>0 & date>as.Date('2022-02-14')))],by=region]\nxx[,outbreak_time:=as.numeric(date-outbreak_start)]\n\ngr <- ggplot(xx[outbreak_time > -10],aes(outbreak_time,growth_rate))+\n  geom_hline(yintercept = 0)+\n  geom_ribbon(aes(ymin=p2.5_growth_rate,ymax=p97.5_growth_rate,fill=region),alpha=0.1)+\n  geom_line(aes(color=region),lwd=2)+\n  scale_color_manual(values=c('black','red'))+\n  scale_fill_manual(values=c('black','red'))+\n  ggtitle('UK & NYC BA.2 Outbreaks, case growth rates')+\n  scale_y_continuous('Case exponential growth rate, r(t)')+\n  scale_x_continuous('Outbreak Time (days since r(t)>0)')+\n  theme(legend.position=c(0.15,0.9))\ngr\nggsave('figures/Outbreak_daily_growth_rate_comparison.png',height=8,width=10)\n\n\n\n# Outbreak comparison GIF -------------------------------------------------\np=ggplot(xx[outbreak_time> -10],\n         aes(outbreak_time,growth_rate,group=region,frame=date,fill=region))+\n  transition_reveal(date)+\n  geom_line(lwd=2,aes(color=region))+\n  geom_ribbon(aes(ymin=p2.5_growth_rate,ymax=p97.5_growth_rate,fill=region),alpha=0.2)+\n  enter_fade()+\n  scale_x_continuous('Outbreak Time',limits=c(-10,35))+\n  exit_fade()+\n  scale_y_continuous('Growth Rate',limits=c(-0.15,0.15))+\n  ggtitle('Omicron Outbreak Tracker | Date: {frame_along}')+\n  scale_color_manual(values=c('black','red'))+\n  scale_fill_manual(values=c('black','red'))+\n  theme(legend.position=c(0.8,0.8))+\n  geom_hline(yintercept=0,color='darkgrey')\n\nanimate(p,nframes = length(unique(xx$date)),fps = 8) %>%\n  anim_save(filename='figures/UK_NYC_BA_2_outbreaks.gif',animation=.)\n\n\n# 7d moving average growth rate estimation --------------------------------\n### Due to changing day-of-week reporting patterns\n### we can't use the default day-of-week adjusted growth rate estimator.\n### Instead, we focus on forecasting the growth rate of the 7-day moving average.\n\n# xx[is.na(new_confirmed),new_confirmed:=0]\n# xx[region==\"New York City\" & date==as.Date('2022-04-03'),rm:=NA] ### an unusual Sunday without reported cases\n# xx[,grm:=nbs(rm,filtering=TRUE,seasonal=FALSE),by=region]\n# xx[,grm_2.5:=nbs(rm,filtering=TRUE,seasonal=FALSE,name = 'p2.5_growth_rate'),by=region]\n# xx[,grm_97.5:=nbs(rm,filtering=TRUE,seasonal=FALSE,name = 'p97.5_growth_rate'),by=region]\n# \n# xx[,outbreak_start_date:=date[min(which(grm>0 & date>as.Date('2022-02-20')))],by=region]\n# xx[,outbreak_time:=as.numeric((date-outbreak_start_date))]\n\n# nyc_out_of_sample[,growth]\n\n# Outbreak r(t) comparison ------------------------------------------------------------\n# \n# \n# grs <- ggplot(xx[outbreak_time > -10],aes(outbreak_time,grm))+\n#   geom_hline(yintercept = 0)+\n#   geom_ribbon(aes(ymin=grm_2.5,ymax=grm_97.5,fill=region),alpha=0.1)+\n#   geom_line(aes(color=region),lwd=2)+\n#   scale_color_manual(values=c('black','red'))+\n#   scale_fill_manual(values=c('black','red'))+\n#   ggtitle('UK & NYC BA.2 Outbreaks, 7d ma growth rates')+\n#   scale_y_continuous('Case exponential growth rate, r(t)')+\n#   scale_x_continuous('Outbreak Time (days since r(t)>0)')+\n#   theme(legend.position=c(0.15,0.9))\n# grs\n# ggsave('figures/Outbreak_7dma_growth_rate_comparison.png',height=8,width=10)\n# \n# \n\n# forecasting NYC ---------------------------------------------------------\nnyc <- xx[region=='New York City']\nuk <- xx[region=='United Kingdom']\n\nnyc <- forecast(nyc,uk,smooth_method='GLM') %>% glue_ma\n\nmedium_alert_threshold=(200/1e5)*8.4e6/7\n\n\nll <- function(sd,\n               mn=log(nyc[.N,rm]),\n               up=log(nyc[.N,p97.5_rm]),\n               lw=log(nyc[.N,p2.5_rm])){\n  ((up-qnorm(.975,mean=mn,sd=sd))^2+(lw-qnorm(.025,mean=mn,sd=sd))^2) %>% return\n}\n\nsdlog <- optimize(f=ll,interval = c(.1,1e3))$minimum\nprob=signif(1-plnorm(medium_alert_threshold,meanlog=log(nyc[.N,rm]),sdlog=sdlog),2)*100\n\n\n# Forecast figure ---------------------------------------------------------\n\n### This figure requires some manual curation to format dates & annotate the plot. \nnyc[,Date:=date] ### changes X-axis to \"Date\" instead of \"date\" w/o upsetting the x scale\nmxd=max(nyc$date) ### print to upate max_date_char, and use this to label confidence intervals\nmxd\nmax_date_char <- \"April 19, 2022\"\ncd <- min(nyc[forecast==TRUE,date])\nx1 <- nyc[forecast==TRUE,rm[1]]\nmn_ci <- nyc[.N-1,p2.5_rm]\nfc <- ggplot(nyc[forecast==TRUE],aes(Date,rm))+\n  geom_line(data=nyc[forecast==FALSE & !is.na(rm) & outbreak_time>-10],lwd=2,col='red')+\n  geom_line(lwd=2,lty=2,col='red')+\n  geom_bar(data=nyc[forecast==FALSE & outbreak_time > -10],aes(y=new_confirmed),col='red',fill='red',alpha=0.1,stat='identity')+\n  # geom_bar(data=nyc,aes(y=new_confirmed),stat='identity',col='red',fill=rgb(1,0,0,0.3))+\n  geom_ribbon(data=nyc[forecast==TRUE],aes(ymin=p2.5_rm,ymax=p97.5_rm),fill='red',alpha=0.2)+\n  geom_hline(yintercept = medium_alert_threshold,lwd=1)+\n  annotate(geom='text',x=as.Date('2022-03-18'),y=medium_alert_threshold+90,\n           label=\"Medium Alert Level Threshold\",size=6)+\n  scale_y_continuous('Newly Reported Cases',limits=c(0,3900))+\n  # scale_x_continuous('Date')+\n  annotate(geom='segment',x=as.Date('2022-04-10'),xend=max(nyc$date),y=3120,yend=medium_alert_threshold)+\n  annotate(geom='text',x=as.Date('2022-04-10'),y=3290,\n           label=paste(prob,'% chance of reaching \\n \"medium alert\" by ',max_date_char,sep=''),\n           fill='white',color='black')+\n  annotate(geom='segment',x=cd+2,xend=cd+5,y=x1-20,yend=1200,color='red',lwd=2)+\n  annotate(geom='text',x=cd+5,y=1100,\n           label='Forecast 7-day moving average',\n           fill='red',color='red',bg='red')+\n  annotate(geom='segment',x=mxd-1,xend=mxd-2,y=mn_ci,yend=800,color='red',lwd=2,alpha=0.2)+\n  annotate(geom='text',x=mxd-2,y=750,\n           label='95% Confidence Intervals',\n           fill='red',color='red',bg='red')+\n  theme_classic(base_size=15)+\n  # geom_point(data=ny_tot_manual,cex=4,color='darkred')+\n  # geom_line(data=ny_tot_manual,color='darkred')+\n  ggtitle('Forecast of New York City COVID-19 Cases over next 12 days')\n\nfc\nggsave('figures/BA2_NYC_forecast.png',height=8,width=10)\n\n\ngr+\n  geom_line(data=nyc[forecast==TRUE],lwd=2,col='red',lty=2)\nggsave('figures/Outbreak_daily_growth_rate_comparison_with_forecast.png',height=6,width=8)\n",
    "created" : 1649350168314.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1132124780",
    "id" : "F7C75DDF",
    "lastKnownWriteTime" : 1649452185,
    "last_content_update" : 1649452197937,
    "path" : "~/COVID/NYC_BA2_dashboard/scripts/BA2_forecast.R",
    "project_path" : "scripts/BA2_forecast.R",
    "properties" : {
        "docOutlineVisible" : "0"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}